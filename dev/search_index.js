var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CutQuad","category":"page"},{"location":"#CutQuad","page":"Home","title":"CutQuad","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CutQuad.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CutQuad]","category":"page"},{"location":"#CutQuad.calc_cut_quad-Tuple{RegionTrees.HyperRectangle{2, Float64}, Any, Int64}","page":"Home","title":"CutQuad.calc_cut_quad","text":"wts, pts, surf_wts, surf_pts = \n    calc_cut_quad(rect, phi, num_quad [, fit_degree=num_quad-1])\n\nReturns a volume and surface quadrature for the domain defined by the  HyperRectangle rect and level-set function phi.  The canonical quadrature  on a non-cut domain (i.e. phi(x)< 0 for all x) uses a tensor-product  Gauss-Legendre quadrature with num_quad^dim points total, where dim is the  dimension of the domain.\n\nNote: Users must supply the level-set function phi as a safe cfunction by  wrapping their Julia function as shown in the example below.\n\nExample\n\njulia> using CutQuad, CxxWrap, RegionTrees\n\njulia> using StaticArrays : SVector\n\njulia> phi_julia = x-> 4*(x[1] + 1)^2 + 36*(x[2] - 0.5)^2 - 9;\n\njulia> cphi = @safe_cfunction(phi_julia, Cdouble, (Vector{Float64},));\n\njulia> rect = HyperRectangle(SVector{2}([0.0; 0.0]), SVector{2}([1.0; 1.0]));\n\njulia> wts, pts, surf_wts, surf_pts = calc_cut_quad(rect, cphi, 3, fit_degree=5)\n\n\n\n\n\n","category":"method"}]
}
