var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CutQuad","category":"page"},{"location":"#CutQuad","page":"Home","title":"CutQuad","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CutQuad.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CutQuad]","category":"page"},{"location":"#CutQuad.cut_cell_quad-Tuple{RegionTrees.HyperRectangle{1, Float64}, Any, Int64}","page":"Home","title":"CutQuad.cut_cell_quad","text":"wts, pts = cut_cell_quad(rect, phi, num_quad [, fit_degree=num_quad-1])\n\nReturns a volume quadrature for the domain defined by the HyperRectangle rect  and level-set function phi.  The canonical quadrature on a non-cut domain (i.e. phi(x) > 0 for all x) uses a tensor-product Gauss-Legendre quadrature  with num_quad^dim points total, where dim is the dimension of the domain.\n\nExample\n\njulia> using CutQuad, RegionTrees\n\njulia> using StaticArrays : SVector\n\njulia> phi = x-> 4*(x[1] + 1)^2 + 36*(x[2] - 0.5)^2 - 9;\n\njulia> rect = HyperRectangle(SVector{2}([0.0; 0.0]), SVector{2}([1.0; 1.0]));\n\njulia> wts, pts = cut_cell_quad(rect, phi, 3, fit_degree=2)\n\n\n\n\n\n","category":"method"},{"location":"#CutQuad.cut_surf_quad-Tuple{RegionTrees.HyperRectangle{1, Float64}, Any, Int64}","page":"Home","title":"CutQuad.cut_surf_quad","text":"surf_wts, surf_pts = \n    cut_surf_quad(rect, phi, num_quad [, fit_degree=num_quad-1])\n\nReturns a surface quadrature for the surface defined by phi(x)=0 over the  HyperRectangle rect, where phi is a level-set function.  If the surface is,  for example, a plane parallel to one of the sides of rect, then we get a  tensor-product Gauss-Legendre quadrature with num_quad^(dim-1) points total,  where dim is the dimension of the domain.\n\nExample\n\njulia> using CutQuad, RegionTrees\n\njulia> using StaticArrays : SVector\n\njulia> phi = x-> 4*(x[1] + 1)^2 + 36*(x[2] - 0.5)^2 - 9;\n\njulia> rect = HyperRectangle(SVector{2}([0.0; 0.0]), SVector{2}([1.0; 1.0]));\n\njulia> surf_wts, surf_pts = cut_surf_quad(rect, phi, 3, fit_degree=2)\n\n\n\n\n\n","category":"method"}]
}
